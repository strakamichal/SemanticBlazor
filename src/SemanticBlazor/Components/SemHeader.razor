@using SemanticBlazor.Mappers
@inherits SemanticBlazor.Components.Base.Common.SemControlBase
@if (Visible)
{
    @BuildHeader();
}

@code {

    protected virtual string Tag => "div";
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public HeaderSize? Size { get; set; }
    [Parameter] public HeaderColor? Color { get; set; }
    [Parameter] public Icon? Icon { get; set; }
    [Parameter] public IconClass[] IconClasses { get; set; }
    [Parameter] public IconPosition? IconPosition { get; set; }
    [Parameter] public bool SubHeader { get; set; }
    [Parameter] public HeaderClass[] Classes { get; set; }
    
    

    public SemHeader()
    {
        ClassMapper
            .If("ui", () => !SubHeader)
            .Get(() => Enums.GetClasses(Classes))
            .If("sub", () => SubHeader)
            .If("icon", () => Icon != null)
            .GetIf(() => Enums.GetClass(IconPosition), () => Icon != null)
            .Get(() => Icons.GetClass(Icon))
            .Get(() => Color?.ToString().ToLower())
            .Get(() => Size?.ToString().ToLower())
            .Add("header");
    }


    protected RenderFragment BuildHeader()
    {
        return builder =>
        {
            builder.OpenElement(0, Tag);
            builder.AddAttribute(1, "class", ClassMapper.ToString());
            builder.AddAttribute(2, "style", Style);
            builder.AddMultipleAttributes(3, Attributes);
            if (Icon is not null)
            {
                builder.OpenElement(4, "i");
                builder.AddAttribute(5, "class", $"{Icons.GetClass(Icon)} {Enums.GetClasses(IconClasses)} icon");
                builder.CloseElement();
            }
            builder.AddContent(6, ChildContent);
            builder.CloseElement();
        };
    }
}