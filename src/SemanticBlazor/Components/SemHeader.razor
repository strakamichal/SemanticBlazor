@using SemanticBlazor.Mappers
@inherits SemanticBlazor.Components.Base.Common.SemControlBase
@if (Visible)
{
    @BuildHeader();
}

@code {

    [Parameter] public string Text { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public HeaderSize? Size { get; set; }
    [Parameter] public HeaderColor? Color { get; set; }
    [Parameter] public NumberedHeader? Numbered { get; set; }
    [Parameter] public Icon? Icon { get; set; }
    [Parameter] public IconPosition? IconPosition { get; set; }
    [Parameter] public bool SubHeader { get; set; }
    [Parameter] public HeaderClass[] Classes { get; set; }
    
    private string GetHeaderTag() =>
        Numbered switch
        {
            NumberedHeader.H1 => "h1",
            NumberedHeader.H2 => "h2",
            NumberedHeader.H3 => "h3",
            NumberedHeader.H4 => "h4",
            NumberedHeader.H5 => "h5",
            NumberedHeader.H6 => "h6",
            _ => "div"
        };
    

    public SemHeader()
    {
        ClassMapper
            .If("ui", () => !SubHeader)
            .Get(() => Enums.GetClasses(Classes))
            .If("sub", () => SubHeader)
            .GetIf(() => Enums.GetClass(IconPosition), () => Icon != null)
            .If("icon", () => Icon != null)
            .Get(() => Icons.GetClass(Icon))
            .Get(() => Color?.ToString().ToLower())
            .Get(() => Size?.ToString().ToLower())
            .Add("header");
    }


    public RenderFragment BuildHeader()
    {
        return builder =>
        {
            builder.OpenElement(0, GetHeaderTag());
            builder.AddAttribute(1, "class", ClassMapper.ToString());
            builder.AddAttribute(2, "style", Style);
            builder.AddMultipleAttributes(3, Attributes);
            builder.AddContent(4, Text);
            builder.AddContent(5, ChildContent);
            builder.CloseElement();
        };
    }
    public enum NumberedHeader
    {
        H1,
        H2,
        H3,
        H4,
        H5,
        H6
    }

}