@typeparam TItem
@using SemanticBlazor.Mappers
@inherits SemanticBlazor.Components.Base.List.SemListBase<TItem>

@if (Visible)
{
  @if (CurrentItems == null)
  {
    @if (PlaceHolderTemplate != null)
    {
      @for (int i = 0; i < PlaceHolderCount; i++)
      {
        @PlaceHolderTemplate
      }
    }
    else
    {
      <div>
        <span><i class="icon spinner loading"></i>@LoadingMessage</span>
      </div>
    }
  }
  else if (!CurrentItems.Any())
  {
    @if (EmptyDataTemplate != null)
    {
      @EmptyDataTemplate
    }
    else
    {
      <div class="ui message no-data">@EmptyDataMessage</div>
    }
  }
  else
  {
    <div id="@Id" class="@SegmentClassMapper.ToString()" style="padding: 1px;">
      <div class="@ClassMapper.ToString()" style="@Style" @attributes="Attributes">
        <CascadingValue Value="ViewType">
          @foreach (var item in CurrentItems)
          {
            @ItemTemplate(item)
          }
        </CascadingValue>
      </div>
    </div>
    @if (AllowPaging)
    {
      <SemPagination TotalPages="TotalPages" PageIndex="PageIndex" PageIndexChanged="@(async index => await SetPageIndex(index))"></SemPagination>
    }
  }
}

@code {
  [Parameter] public string SegmentClass { get; set; } = "basic";
  [Parameter] public ListViewType ViewType { get; set; }
  [Parameter] public RenderFragment<TItem> ItemTemplate { get; set; }
  [Parameter] public RenderFragment PlaceHolderTemplate { get; set; }
  [Parameter] public RenderFragment EmptyDataTemplate { get; set; }
  [Parameter] public string EmptyDataMessage { get; set; } = "No records has been found...";
  [Parameter] public string LoadingMessage { get; set; } = "Loading...";
  [Parameter] public int PlaceHolderCount { get; set; } = 1;
  [Parameter] public bool ScrollOnTopOnPageChanged { get; set; } = true;
  ClassMapper SegmentClassMapper { get; set; } = new ClassMapper();

  public SemDataList()
  {
    SegmentClassMapper
    .Add("ui")
    .Get(() => SegmentClass)
    .If("loading", () => Loading)
    .Add("segment");

    ClassMapper
    .Add("ui")
    .Get(() => Class)
    .Get(() => ViewType.ToString().ToLower());
  }
  public override async Task SetPageIndex(int pageIndex)
  {
    await base.SetPageIndex(pageIndex);
    if (ScrollOnTopOnPageChanged && Rendered) await JsFunc.Lists.ScrollTop(JsRuntime, Id);
  }
}
