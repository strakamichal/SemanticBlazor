@using SemanticBlazor.Mappers
@inherits SemanticBlazor.Components.Base.Common.SemControlBase

@if (Visible)
{
  if (IsSubmitButton)
  {
    <button id="@Id" class="@ClassMapper.ToString()" style="@Style" @attributes="Attributes" @onclick="ButtonClicked" type="@(IsSubmitButton ? " submit" : "button" )" title="@Tooltip">
      @if (Icon != null && IconPosition != SemanticBlazor.IconPosition.Right)
      {
        <SemIcon Icon="@Icon"></SemIcon>
      }
      @ChildContent
      @if (Icon != null && IconPosition == SemanticBlazor.IconPosition.Right)
      {
        <SemIcon Icon="@Icon"></SemIcon>
      }
    </button>
  }
  else if (OnClick.HasDelegate)
  {
    <button id="@Id" class="@ClassMapper.ToString()" style="@Style" @attributes="Attributes" @onclick="ButtonClicked" title="@Tooltip">
      @if (Icon != null && IconPosition != SemanticBlazor.IconPosition.Right)
      {
        <SemIcon Icon="@Icon"></SemIcon>
      }
      @ChildContent
      @if (Icon != null && IconPosition == SemanticBlazor.IconPosition.Right)
      {
        <SemIcon Icon="@Icon"></SemIcon>
      }
    </button>
  }
  else
  {
    <a id="@Id" class="@ClassMapper.ToString()" style="@Style" @attributes="Attributes" title="@Tooltip" href="@Href">
      @if (Icon != null && IconPosition != SemanticBlazor.IconPosition.Right)
      {
        <SemIcon Icon="@Icon"></SemIcon>
      }
      @ChildContent
      @if (Icon != null && IconPosition == SemanticBlazor.IconPosition.Right)
      {
        <SemIcon Icon="@Icon"></SemIcon>
      }
    </a>
  }

  @if (NeedsConfirmation)
  {
    <SemModalConfirmation @ref="_confirmationModal" @onclick="ClickEvent" Header="@ConfirmationHeader" CancelButtonText="@CancelButtonText" ConfirmButtonText="@ConfirmButtonText" ConfirmButtonIconClass="@ConfirmButtonIconClass">
      <Content>
        @ConfirmationMessage
      </Content>
    </SemModalConfirmation>
  }
}

@code {
  [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }
  [Parameter] public RenderFragment ChildContent { get; set; }
  [Parameter] public string Href { get; set; }
  [Parameter] public bool IsSubmitButton { get; set; }
  [Parameter] public bool IsButton { get; set; } = true;
  [Parameter] public bool OnClickLoading { get; set; }
  [Parameter] public string Tooltip { get; set; }
  [Parameter] public Icon? Icon { get; set; }
  [Parameter] public IconPosition? IconPosition { get; set; }
  [Parameter] public bool IconLabeled { get; set; } = true;
  [Parameter] public ButtonColor? Color { get; set; }
  [Parameter] public Emphasis? Emphasis { get; set; }
  [Parameter] public Size? Size { get; set; }
  [Parameter] public ButtonClass[] Classes { get; set; }

  [Parameter] public bool NeedsConfirmation { get; set; }
  [Parameter] public string ConfirmationHeader { get; set; }
  [Parameter] public string ConfirmationMessage { get; set; }
  [Parameter] public string CancelButtonText { get; set; } = "No";
  [Parameter] public string ConfirmButtonText { get; set; } = "Yes";
  [Parameter] public string ConfirmButtonIconClass { get; set; } = "checkmark";
  SemModalConfirmation _confirmationModal;
  bool _loading;
  bool _disabledAfterClick;

  public SemButton()
  {
    ClassMapper
      .Add("ui")
      .If("loading", () => _loading)
      .If("disabled", () => _disabledAfterClick)
      .GetIf(() => Enums.GetClass(IconPosition), () => Icon != null)
      .If("labeled", () => Icon != null && ChildContent != null && (Classes == null || !Classes.Contains(ButtonClass.Basic)) && IconLabeled)
      .If("icon", () => Icon != null && (Classes == null || !Classes.Contains(ButtonClass.Basic)) && IconLabeled)
      .Get(() => Enums.GetClasses(Classes))
      .Get(() => Emphasis?.ToString().ToLower())
      .Get(() => Color?.ToString().ToLower())
      .Get(() => Size?.ToString().ToLower())
      .If("button", () => IsButton);
  }
  async Task ClickEvent(MouseEventArgs e)
  {
    if (OnClickLoading) _loading = true;
    _disabledAfterClick = true;
    await Task.Delay(1);
    await OnClick.InvokeAsync(e);
    _loading = false;
    _disabledAfterClick = false;
  }

  public async Task ButtonClicked(MouseEventArgs e)
  {
    if (NeedsConfirmation)
    {
      await ShowConfirmation();
    }
    else
    {
      await ClickEvent(e);
    }
  }

  async Task ShowConfirmation()
  {
    await _confirmationModal.Show();
  }
}
