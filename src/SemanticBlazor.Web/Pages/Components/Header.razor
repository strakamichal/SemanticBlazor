@page "/Components/Header"
@inherits PageBase
@layout ComponentsLayout
<SemHeader1>Header</SemHeader1>
See the full documentation at <NavLink href="https://semantic-ui.com/collections/header.html" target="_blank">Semantic UI</NavLink>.
<SemDivider/>
<SemHeader1>
    Types
</SemHeader1>
<SemDivider/>

<SemSegment>
    <SemHeader4>Page headers</SemHeader4>
    <p class="header">Headers may be oriented to give the hierarchy of a section in the context of the page</p>
    <SemMessage Classes="new[] { MessageClass.Floating }" Color="MessageColor.Info">
        Page headings are sized using rem and are not affected by surrounding content size.
    </SemMessage>
    <SemHeader1 >First Header</SemHeader1>
    <img class="ui wireframe image" src="/img/short-paragraph.png" alt="paragraph wireframe"/>
    <SemHeader2>Second Header</SemHeader2>
    <img class="ui wireframe image" src="/img/short-paragraph.png" alt="paragraph wireframe"/>
    <SemHeader3>Third Header</SemHeader3>
    <img class="ui wireframe image" src="/img/short-paragraph.png" alt="paragraph wireframe"/>
    <SemHeader4 >Fourth Header</SemHeader4>
    <img class="ui wireframe image" src="/img/short-paragraph.png" alt="paragraph wireframe"/>
    <SemHeader5>Fifth Header</SemHeader5>
    <img class="ui wireframe image" src="/img/short-paragraph.png" alt="paragraph wireframe"/>
    <SemHeader6>Sixth Header</SemHeader6>
    <img class="ui wireframe image" src="/img/short-paragraph.png" alt="paragraph wireframe"/>
</SemSegment>
<CodeHighlight Code="@(@"
  <SemHeader1>First Header</SemHeader1>
  <SemHeader2>Second Header</SemHeader2>
  <SemHeader3>Third Header</SemHeader3>
  <SemHeader4>Fourth Header</SemHeader4>
  <SemHeader5>Fifth Header</SemHeader5>
  <SemHeader6>Sixth Header</SemHeader6>
")"/>


<SemHeader4>Content Headers</SemHeader4>
<p>Headers may be oriented to give the importance of a section in the context of the content that surrounds it</p>
<SemMessage Color="MessageColor.Info">
    Content headings are sized with em and are based on the font-size of their container.
</SemMessage>
<SemButton OnClick="() => FontSize++" Icon="Icon.Plus"/><SemButton OnClick="() => FontSize--" Icon="Icon.Minus"/>
<SemSegment Classes="new[] { SegmentClass.Vertical }" Style="@FontStyles">
    <SemHeader Size="HeaderSize.Huge">
        Huge Header
        <p></p>
    </SemHeader>
    <img class="ui wireframe image" src="/img/short-paragraph.png" alt="paragraph wireframe"/>
    <SemHeader Size="HeaderSize.Large">
        Large Header
        <p></p>
    </SemHeader>
    <img class="ui wireframe image" src="/img/short-paragraph.png" alt="paragraph wireframe"/>
    <SemHeader Size="HeaderSize.Medium">
        Medium Header
        <p></p>
    </SemHeader>
    <img class="ui wireframe image" src="/img/short-paragraph.png" alt="paragraph wireframe"/>
    <SemHeader Size="HeaderSize.Small">
        Small Header
        <p></p>
    </SemHeader>
    <img class="ui wireframe image" src="/img/short-paragraph.png" alt="paragraph wireframe"/>
    <SemHeader Size="HeaderSize.Tiny">
        Tiny Header
        <p></p>
    </SemHeader>
</SemSegment>
<CodeHighlight Code=@(@"
    <SemHeader Size=""HeaderSize.Huge"">Huge Header</SemHeader>
    <SemHeader Size=""HeaderSize.Large"">Large Header</SemHeader>
    <SemHeader Size=""HeaderSize.Medium"">Medium Header</SemHeader>
    <SemHeader Size=""HeaderSize.Small"">Small Header</SemHeader>
    <SemHeader Size=""HeaderSize.Tiny"">Tiny Header</SemHeader>")/>


<SemHeader4>Icon headers</SemHeader4>
<p>A header can be formatted to emphasize an icon</p>
<SemSegment>
    <SemHeader Icon="Icon.User">
        User
    </SemHeader>
    <img class="ui wireframe image" src="/img/short-paragraph.png" alt="paragraph wireframe"/>
</SemSegment>
<SemSegment>
    <SemHeader Icon="Icon.Bus" IconClasses="new[] { IconClass.Circular }">
        Bus
    </SemHeader>
    <img class="ui wireframe image" src="/img/short-paragraph.png" alt="paragraph wireframe"/>
</SemSegment>
<CodeHighlight Code=@(@"
    <SemHeader Icon=""Icon.User"">User</SemHeader>
    <SemHeader Icon=""Icon.Bus"" IconClasses=""new[] { IconClass.Circular }"">Bus</SemHeader>")/>

<SemHeader4>Sub Headers</SemHeader4>
<p>A header can be formatted to appear inside a content block</p>
<SemSegment>
    <SemHeader SubHeader="true">Price</SemHeader>
    <span>$10.99</span>
    <p></p>
</SemSegment>

<SemHeader3>Content</SemHeader3>
<SemHeader4>Image</SemHeader4>
<p>A header can contain an image</p>
<SemSegment Classes="new[] { SegmentClass.Top_Attached }">
    <SemHeader2>
        <img class="ui avatar image" src="/img/school.png" alt="school"/>
        <div class="content">
            Learn more
        </div>
        <SemDivider/>
        <div class="ui content">
            <img class="ui wireframe image" src="/img/short-paragraph.png" alt="paragraph wireframe"/>
        </div>

    </SemHeader2>
    <SemHeader2>
        <img class="ui avatar image" src="/img/patrick.png" alt="Patrick"/>
        Patrick
        <SemDivider/>
        <div class="ui content">
            <img class="ui wireframe image" src="/img/short-paragraph.png" alt="paragraph wireframe"/>
        </div>
    </SemHeader2>
</SemSegment>
<SemSegment>
    <SemHeader1>
        H1
        <SemHeader Classes="new[] { HeaderClass.Sub }">
            Sub Header
        </SemHeader>
    </SemHeader1>
    <SemHeader2 >
        H2
        <SemHeader Classes="new[] { HeaderClass.Sub }">
            Sub Header
        </SemHeader>
    </SemHeader2>
    <SemHeader3 >
        H3
        <SemHeader Classes="new[] { HeaderClass.Sub }">
            Sub Header
        </SemHeader>
    </SemHeader3>
    <SemHeader4 >
        H4
        <SemHeader Classes="new[] { HeaderClass.Sub }">
            Sub Header
        </SemHeader>
    </SemHeader4>
    <SemHeader5 >
        H5
        <SemHeader Classes="new[] { HeaderClass.Sub }">
            Sub Header
        </SemHeader>
    </SemHeader5>
</SemSegment>
<CodeHighlight Code=@(@"
    <SemHeader1>
        H1
        <SemHeader Classes=""new[] { HeaderClass.Sub }"">
            Sub Header
        </SemHeader>
    </SemHeader1>
    <SemHeader2 >
        H2
        <SemHeader Classes=""new[] { HeaderClass.Sub }"">
            Sub Header
        </SemHeader>
    </SemHeader2>
    <SemHeader3 >
        H3
        <SemHeader Classes=""new[] { HeaderClass.Sub }"">
            Sub Header
        </SemHeader>
    </SemHeader3>
    <SemHeader4 >
        H4
        <SemHeader Classes=""new[] { HeaderClass.Sub }"">
            Sub Header
        </SemHeader>
    </SemHeader4>
    <SemHeader5 >
        H5
        <SemHeader Classes=""new[] { HeaderClass.Sub }"">
            Sub Header
        </SemHeader>
    </SemHeader5>
")>
</CodeHighlight>

<p>Headers may contain sub headers</p>
<SemSegment>
    <SemHeader2>
        Account settings
        <SemHeader SubHeader="true">Manage your account settings and email</SemHeader>
    </SemHeader2>
</SemSegment>


<SemHeader3>Variations</SemHeader3>
<SemHeader4>Dividing</SemHeader4>
<p>A header can be formatted to divide itself from the content below it</p>
<SemSegment Classes="new[] { SegmentClass.Top_Attached }">
    <img class="ui wireframe image" src="/img/short-paragraph.png" alt="paragraph wireframe"/>
    <SemHeader Classes="new[] { HeaderClass.Dividing }">
        Dividing Header
    </SemHeader>
    <img class="ui wireframe image" src="/img/short-paragraph.png" alt="paragraph wireframe"/>
</SemSegment>
<CodeHighlight Code=@(@"
    <SemSegment Classes=""new[] { SegmentClass.Top_Attached }"">
        <SemHeader Classes=""new[] { HeaderClass.Dividing }"">
            Dividing Header
        </SemHeader>
    </SemSegment>
")>
</CodeHighlight>


<SemHeader4>Block</SemHeader4>
<p>A header can be formatted to appear inside a content block</p>
<SemSegment Classes="new[] { SegmentClass.Top_Attached }">
    <SemHeader3 Classes="new[] { HeaderClass.Block }">
        Block Header
    </SemHeader3>
    <img class="ui wireframe image" src="/img/short-paragraph.png" alt="paragraph wireframe"/>
</SemSegment>
<CodeHighlight Code=@(@"
    <SemSegment Classes=""new[] { SegmentClass.Top_Attached }"">
        <SemHeader3 Classes=""new[] { HeaderClass.Block }"">
            Block Header
        </SemHeader3>
    </SemSegment>
")/>

<SemHeader4>Attached</SemHeader4>
<p>A header can be attached to other content, like a segment</p>
<SemSegment>
    <SemHeader Classes="new[] { HeaderClass.Top_Attached }">
        Top Attached
    </SemHeader>
    <SemSegment Classes="new[] { SegmentClass.Attached }">
        <img class="ui wireframe image" src="/img/short-paragraph.png" alt="paragraph wireframe"/>
    </SemSegment>
    <SemHeader Classes="new[] { HeaderClass.Attached }">
        Attached
    </SemHeader>
    <SemSegment Classes="new[] { SegmentClass.Attached }">
        <img class="ui wireframe image" src="/img/short-paragraph.png" alt="paragraph wireframe"/>
    </SemSegment>
    <SemHeader Classes="new[] { HeaderClass.Bottom_Attached }">
        Bottom Attached Header
    </SemHeader>
</SemSegment>
<CodeHighlight
    Code=@(@"
    <SemHeader Classes=""new[] { HeaderClass.Top_Attached }"">
        Top Attached
    </SemHeader>
    <SemSegment Classes=""new[] { SegmentClass.Attached }"">
     
    </SemSegment>
    <SemHeader Classes=""new[] { HeaderClass.Attached }"">
        Attached
    </SemHeader>
    <SemSegment Classes=""new[] { SegmentClass.Attached }"">
     
    </SemSegment>
    <SemHeader Classes=""new[] { HeaderClass.Bottom_Attached }"">
        Bottom Attached Header
    </SemHeader>")>
</CodeHighlight>

<SemHeader4>Floating</SemHeader4>
<p>A header can sit to the left or right of other content</p>
<SemSegment Classes="new[] { SegmentClass.Clearing }">
    <SemHeader3 Classes="new[] { HeaderClass.Right_Floated }">
        Go Forward
    </SemHeader3>
    <SemHeader3 Classes="new[] { HeaderClass.Left_Floated }">
        Go Back
    </SemHeader3>
</SemSegment>

<CodeHighlight Code=@(@"
    <SemHeader3 Classes=""new[] { HeaderClass.Right_Floated }"">
        Go Forward
    </SemHeader3>
    <SemHeader3 Classes=""new[] { HeaderClass.Left_Floated }"">
        Go Back
    </SemHeader3>
")/>

<SemHeader4>Text alignment</SemHeader4>
<p>A header can have its text aligned to a side</p>
<SemSegment>
    <SemHeader Classes="new[] { HeaderClass.Right_Aligned }">
        Right
    </SemHeader>
    <SemHeader Classes="new[] { HeaderClass.Left_Aligned }">
        Left
    </SemHeader>
    <SemHeader Classes="new[] { HeaderClass.Justified }">
        This should take up the full width even if only one line
    </SemHeader>
    <SemHeader Classes="new[] { HeaderClass.Center_Aligned }">
        Center
    </SemHeader>
</SemSegment>

<CodeHighlight
    Code=@(@"
 <SemHeader Classes=""new[] { HeaderClass.Right_Aligned }"">
     Right
 </SemHeader>
 <SemHeader Classes=""new[] { HeaderClass.Left_Aligned }"">
     Left
 </SemHeader>
 <SemHeader Classes=""new[] { HeaderClass.Justified }"">
     This should take up the full width even if only one line
 </SemHeader>
 <SemHeader Classes=""new[] { HeaderClass.Center_Aligned }"">
     Center
 </SemHeade
")>
</CodeHighlight>


<SemHeader4>Coloured</SemHeader4>
<p>A header can be formatted with different colors</p>
<SemSegment>
    <SemHeader4 Color="HeaderColor.Red">
        Red
    </SemHeader4>
    <SemHeader4 Color="HeaderColor.Orange">
        Orange
    </SemHeader4>
    <SemHeader4 Color="HeaderColor.Yellow">
        Yellow
    </SemHeader4>
    <SemHeader4 Color="HeaderColor.Olive">
        Olive
    </SemHeader4>
    <SemHeader4 Color="HeaderColor.Green">
        Green
    </SemHeader4>
    <SemHeader4 Color="HeaderColor.Teal">
        Teal
    </SemHeader4>
    <SemHeader4 Color="HeaderColor.Blue">
        Blue
    </SemHeader4>
    <SemHeader4 Color="HeaderColor.Violet">
        Violet
    </SemHeader4>
    <SemHeader4 Color="HeaderColor.Purple">
        Purple
    </SemHeader4>
    <SemHeader4 Color="HeaderColor.Pink">
        Pink
    </SemHeader4>
    <SemHeader4 Color="HeaderColor.Brown">
        Brown
    </SemHeader4>
</SemSegment>

<CodeHighlight Code=@(@"
<SemHeader4 Color=""HeaderColor.Red"">
    Red
</SemHeader4>
<SemHeader4 Color=""HeaderColor.Orange"">
    Orange
</SemHeader4>
<SemHeader4 Color=""HeaderColor.Yellow"">
    Yellow
</SemHeader4>
<SemHeader4 Color=""HeaderColor.Olive"">
    Olive
</SemHeader4>
<SemHeader4 Color=""HeaderColor.Green"">
    Green
</SemHeader4>
<SemHeader4 Color=""HeaderColor.Teal"">
    Teal
</SemHeader4>
<SemHeader4 Color=""HeaderColor.Blue"">
    Blue
</SemHeader4>
<SemHeader4 Color=""HeaderColor.Violet"">
    Violet
</SemHeader4>
<SemHeader4 Color=""HeaderColor.Purple"">
    Purple
</SemHeader4>
<SemHeader4 Color=""HeaderColor.Pink"">
    Pink
</SemHeader4>
<SemHeader4 Color=""HeaderColor.Brown"">
    Brown
</SemHeader4>
")></CodeHighlight>

<SemHeader4>Inverted</SemHeader4>
<p>A header can have its colors inverted for contrast</p>
<div class="ui ignored info message">
    Inverted headers use modified light versions of your site's color scheme that are adapted to have more contrast on dark background
</div>
<SemSegment Classes="new[] { SegmentClass.Inverted }">
    <SemHeader4 Color="HeaderColor.Red" Classes="new[] { HeaderClass.Inverted }">
        Red
    </SemHeader4>
    <SemHeader4 Color="HeaderColor.Orange" Classes="new[] { HeaderClass.Inverted }">
        Orange
    </SemHeader4>
    <SemHeader4 Color="HeaderColor.Yellow" Classes="new[] { HeaderClass.Inverted }">
        Yellow
    </SemHeader4>
    <SemHeader4 Color="HeaderColor.Olive" Classes="new[] { HeaderClass.Inverted }">
        Olive
    </SemHeader4>
    <SemHeader4 Color="HeaderColor.Green" Classes="new[] { HeaderClass.Inverted }">
        Green
    </SemHeader4>
    <SemHeader4 Color="HeaderColor.Teal" Classes="new[] { HeaderClass.Inverted }">
        Teal
    </SemHeader4>
    <SemHeader4 Color="HeaderColor.Blue" Classes="new[] { HeaderClass.Inverted }">
        Blue
    </SemHeader4>
    <SemHeader4 Color="HeaderColor.Violet" Classes="new[] { HeaderClass.Inverted }">
        Violet
    </SemHeader4>
    <SemHeader4 Color="HeaderColor.Purple" Classes="new[] { HeaderClass.Inverted }">
        Purple
    </SemHeader4>
    <SemHeader4 Color="HeaderColor.Pink" Classes="new[] { HeaderClass.Inverted }">
        Pink
    </SemHeader4>
    <SemHeader4 Color="HeaderColor.Brown" Classes="new[] { HeaderClass.Inverted }">
        Brown
    </SemHeader4>
</SemSegment>
<CodeHighlight Code=@(@"
<SemHeader4 Color=""HeaderColor.Red"" Classes=""new[] { HeaderClass.Inverted }"">
    Red
</SemHeader4>
<SemHeader4 Color=""HeaderColor.Orange"" Classes=""new[] { HeaderClass.Inverted }"">
    Orange
</SemHeader4>
<SemHeader4 Color=""HeaderColor.Yellow"" Classes=""new[] { HeaderClass.Inverted }"">
    Yellow
</SemHeader4>
<SemHeader4 Color=""HeaderColor.Olive"" Classes=""new[] { HeaderClass.Inverted }"">
    Olive
</SemHeader4>
<SemHeader4 Color=""HeaderColor.Green"" Classes=""new[] { HeaderClass.Inverted }"">
    Green
</SemHeader4>
<SemHeader4 Color=""HeaderColor.Teal"" Classes=""new[] { HeaderClass.Inverted }"">
    Teal
</SemHeader4>
<SemHeader4 Color=""HeaderColor.Blue"" Classes=""new[] { HeaderClass.Inverted }"">
    Blue
</SemHeader4>
<SemHeader4 Color=""HeaderColor.Violet"" Classes=""new[] { HeaderClass.Inverted }"">
    Violet
</SemHeader4>
<SemHeader4 Color=""HeaderColor.Purple"" Classes=""new[] { HeaderClass.Inverted }"">
    Purple
</SemHeader4>
<SemHeader4 Color=""HeaderColor.Pink"" Classes=""new[] { HeaderClass.Inverted }"">
    Pink
</SemHeader4>
<SemHeader4 Color=""HeaderColor.Brown"" Classes=""new[] { HeaderClass.Inverted }"">
    Brown
</SemHeader4>
")></CodeHighlight>


@code {
    private int _fontSize = 10;
    private string FontStyles => $"font-size: {FontSize}px;";

    private int FontSize
    {
        get => _fontSize;
        set
        {
            if (value < 1)
            {
                _fontSize = 1;
            }
            else if (value > 100)
            {
                _fontSize = 100;
            }
            else
            {
                _fontSize = value;
            }
        }
    }

}